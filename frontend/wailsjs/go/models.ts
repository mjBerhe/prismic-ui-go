export namespace main {
	
	export class CSVFile {
	    Path: string;
	    Name: string;
	    Data: string[][];
	
	    static createFrom(source: any = {}) {
	        return new CSVFile(source);
	    }
	
	    constructor(source: any = {}) {
	        if ('string' === typeof source) source = JSON.parse(source);
	        this.Path = source["Path"];
	        this.Name = source["Name"];
	        this.Data = source["Data"];
	    }
	}
	export class Config {
	    uiDirectory: string;
	    palmFolderPath: string;
	    palmInputDataPath: string;
	    palmOutputDataPath: string;
	    palmSAAFolderPath: string;
	    palmSAAInputDataPath: string;
	    palmSAAOutputDataPath: string;
	    pathToValuationConfigs: string;
	    pathToLiabilityConfigs: string;
	    pathToRiskConfigs: string;
	    pathToSAAConfigs: string;
	    scriptsFolderPath: string;
	    pythonParserScript: string;
	    pythonLiabilityConfigScript: string;
	    generateInputFolderPath: string;
	    generateLiabilityConfigPath: string;
	    generateSpreadAssumptionPath: string;
	    generateScenarioConfigPath: string;
	    generateScenarioPath: string;
	    scenarioConfigsPath: string;
	    baseLiabilityConfigPath: string;
	    baseSpreadAssumptionPath: string;
	
	    static createFrom(source: any = {}) {
	        return new Config(source);
	    }
	
	    constructor(source: any = {}) {
	        if ('string' === typeof source) source = JSON.parse(source);
	        this.uiDirectory = source["uiDirectory"];
	        this.palmFolderPath = source["palmFolderPath"];
	        this.palmInputDataPath = source["palmInputDataPath"];
	        this.palmOutputDataPath = source["palmOutputDataPath"];
	        this.palmSAAFolderPath = source["palmSAAFolderPath"];
	        this.palmSAAInputDataPath = source["palmSAAInputDataPath"];
	        this.palmSAAOutputDataPath = source["palmSAAOutputDataPath"];
	        this.pathToValuationConfigs = source["pathToValuationConfigs"];
	        this.pathToLiabilityConfigs = source["pathToLiabilityConfigs"];
	        this.pathToRiskConfigs = source["pathToRiskConfigs"];
	        this.pathToSAAConfigs = source["pathToSAAConfigs"];
	        this.scriptsFolderPath = source["scriptsFolderPath"];
	        this.pythonParserScript = source["pythonParserScript"];
	        this.pythonLiabilityConfigScript = source["pythonLiabilityConfigScript"];
	        this.generateInputFolderPath = source["generateInputFolderPath"];
	        this.generateLiabilityConfigPath = source["generateLiabilityConfigPath"];
	        this.generateSpreadAssumptionPath = source["generateSpreadAssumptionPath"];
	        this.generateScenarioConfigPath = source["generateScenarioConfigPath"];
	        this.generateScenarioPath = source["generateScenarioPath"];
	        this.scenarioConfigsPath = source["scenarioConfigsPath"];
	        this.baseLiabilityConfigPath = source["baseLiabilityConfigPath"];
	        this.baseSpreadAssumptionPath = source["baseSpreadAssumptionPath"];
	    }
	}
	export class FileDialogOptions {
	    SelectDirectory: boolean;
	    DefaultDirectory?: string;
	
	    static createFrom(source: any = {}) {
	        return new FileDialogOptions(source);
	    }
	
	    constructor(source: any = {}) {
	        if ('string' === typeof source) source = JSON.parse(source);
	        this.SelectDirectory = source["SelectDirectory"];
	        this.DefaultDirectory = source["DefaultDirectory"];
	    }
	}
	export class SAATargetPort {
	    public_agg: number;
	    public_big: number;
	    private_agg: number;
	    private_big: number;
	    clo: number;
	    cml_agg: number;
	    cml_big: number;
	    cmbs_agg: number;
	    cmbs_big: number;
	    equity: number;
	    publicclo: number;
	    rmbs_agg: number;
	    rmbs_big: number;
	    treasury: number;
	    abs: number;
	    cmo: number;
	    rmbsn_agg: number;
	    rmbsn_big: number;
	    cp_agg: number;
	    cp_big: number;
	
	    static createFrom(source: any = {}) {
	        return new SAATargetPort(source);
	    }
	
	    constructor(source: any = {}) {
	        if ('string' === typeof source) source = JSON.parse(source);
	        this.public_agg = source["public_agg"];
	        this.public_big = source["public_big"];
	        this.private_agg = source["private_agg"];
	        this.private_big = source["private_big"];
	        this.clo = source["clo"];
	        this.cml_agg = source["cml_agg"];
	        this.cml_big = source["cml_big"];
	        this.cmbs_agg = source["cmbs_agg"];
	        this.cmbs_big = source["cmbs_big"];
	        this.equity = source["equity"];
	        this.publicclo = source["publicclo"];
	        this.rmbs_agg = source["rmbs_agg"];
	        this.rmbs_big = source["rmbs_big"];
	        this.treasury = source["treasury"];
	        this.abs = source["abs"];
	        this.cmo = source["cmo"];
	        this.rmbsn_agg = source["rmbsn_agg"];
	        this.rmbsn_big = source["rmbsn_big"];
	        this.cp_agg = source["cp_agg"];
	        this.cp_big = source["cp_big"];
	    }
	}
	export class LiabilityConfig {
	    sFileName: string;
	    iTimeStep: number;
	    iTotalScenarios: number;
	    iInnerLoopScenariosNum: number;
	    sOutterLoopScenario: string;
	    sInnerLoopScenario: string;
	    sCashPath: string;
	    sPlanSpecPath: string;
	    bRiskN: boolean;
	    bBasisRisk: boolean;
	    bSpousalContinuation: boolean;
	    bSetBeginningAssetsVM21: boolean;
	    dblBeginningAssetsVM21: number;
	    af_spread_sim: number;
	    bForceNoLapseGMDB: boolean;
	    SAA_1p_change: string;
	    SAA_1p_change_asset: string[];
	    SAA_shock: number[];
	    SAA_parallel_change: string;
	    SAA_parallel_change_assets: string[];
	    SAA_parallel_shock: number[];
	    bDeterministicD4D: boolean;
	    bUseDFCurve: boolean;
	    bLiabilityDetailOutput: boolean;
	    bDebugger: boolean;
	    invest_portfolio: string;
	    dblBeta1SpotShock: number;
	    dblBeta2SpotShock: number;
	    dblRNcost: number;
	    buseswap_sim: boolean;
	    dblmeanreversion: number;
	    bStatdiscounting: boolean;
	    dtStart: string;
	    dtValuation: string;
	    sLiabilityPath: string;
	    bStatPrime: boolean;
	    b_add_premium: boolean;
	    bRunSAA: boolean;
	    SAAConfigPath: string;
	    add_riderfee_to_npv: boolean;
	    anyuse_2_spread_sim: number;
	    SAASettingPath: string;
	    bload_scenarioapproch: boolean;
	    dblDiscountSpread: number;
	    dblMainExpense: number;
	    iWithdrawalType: number;
	    iDynamicLapseType: number;
	    iAnnuitizationType: number;
	    iMortalityTable: number;
	    iExpense_Type: number;
	    iDeposite_Tpye: number;
	    bExpandContracts: boolean;
	    iOutterWithdrawalType: number;
	    iOutterDynamicLapseType: number;
	    iOutterAnnuitizationType: number;
	    iOutterMortalityTable: number;
	    iOutterExpense_Type: number;
	    iOutterDeposite_Type: number;
	    iVM21_Discount: number;
	    iProrataLapseType: number;
	    dblLapseScaler: number;
	    dblMortalityScaler: number;
	    bUseCohortTreatyCaps: boolean;
	    bTreatyLevelMinMax: boolean;
	    dblInterestRateDelta: number;
	    dblEquityDelta: number;
	    dbl_deferal_mort_scale_sim: number;
	    dbl_payout_mort_scale_sim: number;
	    dbl_lapse_dym_itm_scale_sim: number;
	    dbl_lapse_dym_otm_scale_sim: number;
	    dbl_lapse_floor_spread_sim: number;
	    dbl_lso_takeup_scale_sim: number;
	    dbl_ib_election_scale_sim: number;
	    dbl_prorata_wd_scale_sim: number;
	    dbl_d4d_wd_scale_sys_sim: number;
	    dbl_d4d_wd_scale_nonsys_sim: number;
	    dbl_d4d_migrition_scale_sim: number;
	    dbl_d4d_migrition_spread_sim: number;
	    ipick_scen_num: number;
	    dblMaxEquityExposure: number;
	    iForceBIGSellMonth: number;
	    sCREDITFILE: string;
	    sVM20_JsonPath: string;
	    sassetmortport_assumption_path: string;
	    AlternativeReturn: number[];
	    dbl_extraspread_reinv: number;
	    ireinvest_choice: number;
	    b_replace_initialport_by_reinvport: any;
	    b_run_asset_cashflow: any;
	    asset_path: string;
	    initial_port_group: number[];
	    reinvest_port_group: number[];
	    bStress_Mortality: any;
	    iMortalityType: number;
	    bstress_run: any;
	    iOutterMortalityType: number;
	    sExternal_liability_path: string;
	    bDebugInformationALM: any;
	    bRollBVInformationALM: any;
	    i_no_equity_sell_period: number;
	    dbl_initial_bel: number[];
	    bdividend_mode: any;
	    dbl_bscr_level: number[];
	    dbl_other_expense: number;
	    bForceBIGSell: any;
	    btax_mode: any;
	    bload_ss_epl: any;
	    bload_gul_epl: any;
	    bload_oas: any;
	    bassetrebalance: any;
	    rebalance_time_schedual: number[];
	    irebalancefreq: number;
	    bexclude_CLO_equity: any;
	    dblswapexpense: number;
	    dbl_libcf_scalar: number;
	    bOnTheFlyGenerator: any;
	    sfinancialmodel_config: string;
	    b_dividend_restrict: any;
	    dbl_dividend_restriction_schedual: number[];
	    b_replace_initport_modify: any;
	    reinvest_port_group_inner: number[];
	    improve_path_m: string;
	    improve_path_f: string;
	    dbl_tax_shock: number;
	    bload_epl_adhoc_mode: boolean;
	    sliab_inner_cf_external: string;
	    sliab_outter_cf_external: string;
	    sScenario_innerfile_external: string;
	    SScenario_outterfile_external: string;
	    ishockratesyear: number;
	    ifin_month: number;
	    binner_asset_reserve_run: boolean;
	    AlternativeReturn_inner: number[];
	    dbl_inner_other_expense: number;
	    bScenarioapproach_cf: boolean;
	    dbl_fx_expense: number;
	    corp_blocks: number[];
	    s_Nar_files: string;
	    iSimulationLength: number;
	    iSimYear: number;
	    i_use_nested_bel_period: number;
	    bswap_optimization: any;
	    dbl_inner_MaxEquityExposure: number;
	    dbl_initial_bel_noequity: number[];
	    reinvest_port_group_inner_noequity: number[];
	    brebalance_sell_buy: any;
	    b_fill_bscr_gap: any;
	    bload_dividend_array: any;
	    bloadtax_array: any;
	    attributiontype_1: number;
	    attributiontype_2: number;
	    attributiontype_3: number;
	    attributiontype_4: number;
	    attributiontype_5: number;
	    attributiontype_6: number;
	    attributiontype_7: number;
	    attributiontype_8: number;
	    attributiontype_9: number;
	    attributiontype_10: number;
	    attributiontype_11: number;
	    attributiontype_12: number;
	    attributiontype_13: number;
	    attributiontype_14: number;
	    attributiontype_15: number;
	    dbltier1maxpct: number;
	    SAA_target_port: SAATargetPort[];
	    SAA_target_port_inner: SAATargetPort[];
	    sScenario_innerfile_up_external: string;
	    sScenario_innerfile_down_external: string;
	    dblhedgeratio: number[];
	    intsim_stop_mtm: number;
	    sScenario_innerfile_up_liq_external: string;
	    sScenario_innerfile_down_liq_external: string;
	    initial_base0_bel: number[];
	    liqshockarray: number[];
	    loaded_equity_bel: number[];
	    loaded_nonequity_bel: number[];
	    loaded_bases0_bel: number[];
	    bload_generated_reserves: any;
	    tax_reserve: number[];
	    btax_reserve: any;
	    sScenario_innerfile_up_liq_external_shock1: string;
	    sScenario_innerfile_down_liq_external_shock1: string;
	    sScenario_innerfile_up_liq_external_shock2: string;
	    sScenario_innerfile_down_liq_external_shock2: string;
	    loaded_dividend: number[];
	    anyuse_4_scale_sim: number;
	    bbscr_old_rule: any;
	    dblDiscountSpread_2: number;
	    bexclude_hy_asset_inner: any;
	    dbl_incentive_fee: number;
	    dbl_alpha_pub: number;
	    i_inner_otherexp_shockType: number;
	    b_SBA_inner_detail: any;
	    i_swap_wo_pd: number;
	    i_std_apch_pd: number;
	    dbl_std_apch_value: number[];
	    dbl_std_apch_dur: number[];
	    i_fctr_apch_pd: number;
	    dbl_swap_fix_amt: number;
	    i_swap_fix_beg: number;
	    i_swap_fix_end: number;
	    iuse_sim_liqratecharge_begin: number;
	    iuse_sim_liqratecharge_end: number;
	    b_sba_inner_incentive: any;
	    b_grading_sens: any;
	    ScenarioLoader: string;
	    b_notch_down_rating: any;
	    dbl_bma_258f_spread: number;
	    binner_grading_fixedyears: any;
	    bincludebidaskcost: any;
	    bswap_sofr: any;
	    bsofr_curve_swap: any;
	    sofr_outer: string;
	    sofr_inner: string;
	    sofr_inner_u25: string;
	    sofr_inner_d25: string;
	    sofr_inner_liqup: string;
	    sofr_inner_liqdown: string;
	    sofr_inner_liqup_u25: string;
	    sofr_inner_liqup_d25: string;
	    sofr_inner_liqdown_u25: string;
	    sofr_inner_liqdown_d25: string;
	    brun_bma_liq_size: any;
	    bma_liq_up_size_array: number[];
	    bma_liq_down_size_array: number[];
	    bnotchdown_outside: boolean;
	    dbl_inner_bma_spreadshock?: number[];
	    dbl_loc_cost: number;
	    i_loc_period: number;
	    dbl_dta_initial: number;
	    dbl_tax_array: number[];
	    dbl_bma_258f_spread_inner: number;
	    balts_bmareturn: any;
	    iExpense_Type_inner: number;
	    innermaxequity_0: number;
	    reinvest_port_group_inner_adhoc1: number[];
	    reinvest_port_group_inner_adhoc1_noequity: number[];
	    b_drag_cash_rebalance: boolean;
	    brun_unique_cashflow_prismic: boolean;
	    sba_inner_expense_shock: number;
	    sba_inner_equitymean: number;
	    sba_inner_equityvol: number;
	    sSVLpath: string;
	    bidaskcost_public: number;
	    bidaskcost_publicCLO: number;
	    bidaskcost_fx: number;
	    bidaskcost_swap: number;
	    dblInitialRate: number;
	    portfolioRunoff: number;
	    dblSpread: number;
	    dblMainAUMExpense: number;
	    dblOutterLapseScaler: number;
	    bSunriseOnly: boolean;
	    bTreatyOnlyVM21: boolean;
	    ReserveMethod: number;
	    dblPartialWithdrawal: number;
	    dblParitalWithdrawalEfficiency: number;
	    dblOutterPartialWithdrawalEfficiencyScaler: number;
	    bCommuteGMWB: boolean;
	    bLoadAAAScenariosfromFile: boolean;
	    sAAAScenariofromFile: string;
	    iLoadSingleAAA: number;
	    bLoadAAASequence: boolean;
	    iSinglePolicyFilter: number;
	    bBestEstimateAssumptions: boolean;
	    iLoadSequence: number[];
	    sMortalityPath: string;
	    iProjectNum: number;
	    iSeedShift: number;
	    iSimInterval: number;
	    dbl3m: number;
	    dbl6m: number;
	    dbl1y: number;
	    dbl2y: number;
	    dbl3y: number;
	    dbl5y: number;
	    dbl7y: number;
	    dbl10y: number;
	    dbl20y: number;
	    dbl30y: number;
	    bSPIACashFlow: boolean;
	    dblSpreadOnAnnuitization: number;
	    dblInvestmentExpense: number;
	    dblDefaultExpense: number;
	    dblFixedDiscountRate: number;
	    RW_ESG_Settings: number;
	    bForceRevenueShare: boolean;
	    dblTransactionExpense: number;
	    c1_riskfactor: number[];
	    BSCR_riskfactor: number[][];
	    iTimeSkip: number;
	    bForceSingleThread: boolean;
	    bShiftTimeSkip: boolean;
	    bCDHS: boolean;
	    bAllowProgressBar: boolean;
	    bUniqueScenarioSizeTuning: boolean;
	    bPolicySampling: boolean;
	    iScenarioPerPolicy: number;
	    bMemorySaver: boolean;
	    iCoreThreadOpen: number;
	    bWeightRun: boolean;
	    bUpDownOff: boolean;
	    bGMIBForcedUtilization: boolean;
	    bOutterGMIBForcedUtilization: boolean;
	    bGMIBMAXAGEUTILIZATION: boolean;
	    bGAPVVM21NOSPREAD: boolean;
	    imortalitycode: number;
	    bTestSpecialMortality: boolean;
	    dblTestMortalityrate: number;
	    sRegressionPath: string;
	    sAnnuityPath: string;
	    sSerializedPath: string;
	    dblCorpYieldBeta: number;
	    dblITMAnnuitizationPower: number;
	    dblLapseFloor: number;
	    dblLastCancelUtilization: number;
	    dblLastChanceFactor: number;
	    dblMortalityImprovementScaler: number;
	    dblNRSINonGuaranteeFactor: number;
	    bAllowFeeResetToMaxGMIB: boolean;
	    bAnnualAnnuitizationOnly: boolean;
	    bExcludeReinsuranceCap: boolean;
	    bForceGMWBACDto115: boolean;
	    bPayoutExpense: boolean;
	    bSobolRand: boolean;
	    bSobolShifted_: boolean;
	    bSobolBrownianBridge: boolean;
	    bSPIAReserve: boolean;
	    bUniqueScenarioContractTesting: boolean;
	    bUseSerializedResults: boolean;
	    bGMWBTakeSPIA: boolean;
	    bIgnoreCommission: boolean;
	    bLoadTreatyBasedUtilization: boolean;
	    bMAFCaching: boolean;
	    bNoWithdrawalCohortAdjustment: boolean;
	    bOverrideTargetAllocation: boolean;
	    bPayoutImprovement: boolean;
	    bUniqueScenarios: boolean;
	    dblExpenseFactor: number;
	    bDemean: boolean;
	    bDemeanMartingaleAdjustment: boolean;
	    dblFundDriftAdjustment: number;
	    bUseBond: boolean;
	    iSimulationType: number;
	    bSerializedRollforward: boolean;
	    bSerializeOutput: boolean;
	    dbl10yweight: number;
	    dbl1yweight: number;
	    dbl20yweight: number;
	    dbl30ySwapSpread: number;
	    dbl30ySwapweight: number;
	    dbl30yweight: number;
	    dbl5yweight: number;
	    dblBeginningBook: number;
	    dbl10ySpread: number;
	    dbl1ySpread: number;
	    dbl20ySpread: number;
	    dbl30ySpread: number;
	    dbl5ySpread: number;
	    dblC3DiscountRate: number;
	    dblCDHSCallOptionVol: number;
	    dblCDHSEquityMeanReturn: number;
	    dblCDHSEquityRateParameters: number;
	    dblCDHSInterestRateParamaters: number;
	    dblCorpYieldConstant: number;
	    dblTaxRate: number;
	    iAG43Solve: number;
	    iC3P2Solve: number;
	    taxreserveweight: number;
	    bCDHSGPAVDOnly: boolean;
	    bCDHSwithCallOption: boolean;
	    bFullDeltaCDHS: boolean;
	    bFullRhoCDHS: boolean;
	    bGPVADOneAsset: boolean;
	    bGPVADwithCDHS: boolean;
	    bRunGPAVDMatrix: boolean;
	    bStandardScenario: boolean;
	    bWorkingReserves: boolean;
	    CDHSshocktype: number;
	    iCDHSDropRecoveryLength: number;
	    bQISIINRSIFactors: boolean;
	    bAG43OnlyOutput: boolean;
	    bNoMortalityAdjustment: boolean;
	    iUpDown: number;
	    bRegressionTest: boolean;
	    dblFXRate: number;
	    bAgeCalculationALB: boolean;
	    bBeginningMonthMortality: boolean;
	    bEndofAnniversaryProjection: boolean;
	    bExactDate: boolean;
	    bFeeAddBackForLapse: boolean;
	    bFullCalculation: boolean;
	    bStress_Lapse: boolean;
	    bUse22ndTable: boolean;
	    bUseAgam22ndTable: boolean;
	    iCurveIntepolationMethod: number;
	    iThreadsForOnTheFlyGenerator: number;
	    bMonthlyMarketAnnuityFactor: boolean;
	    bPredictiveLapse: boolean;
	    bStandardApproachDiscounting: boolean;
	    parameters: number[][];
	
	    static createFrom(source: any = {}) {
	        return new LiabilityConfig(source);
	    }
	
	    constructor(source: any = {}) {
	        if ('string' === typeof source) source = JSON.parse(source);
	        this.sFileName = source["sFileName"];
	        this.iTimeStep = source["iTimeStep"];
	        this.iTotalScenarios = source["iTotalScenarios"];
	        this.iInnerLoopScenariosNum = source["iInnerLoopScenariosNum"];
	        this.sOutterLoopScenario = source["sOutterLoopScenario"];
	        this.sInnerLoopScenario = source["sInnerLoopScenario"];
	        this.sCashPath = source["sCashPath"];
	        this.sPlanSpecPath = source["sPlanSpecPath"];
	        this.bRiskN = source["bRiskN"];
	        this.bBasisRisk = source["bBasisRisk"];
	        this.bSpousalContinuation = source["bSpousalContinuation"];
	        this.bSetBeginningAssetsVM21 = source["bSetBeginningAssetsVM21"];
	        this.dblBeginningAssetsVM21 = source["dblBeginningAssetsVM21"];
	        this.af_spread_sim = source["af_spread_sim"];
	        this.bForceNoLapseGMDB = source["bForceNoLapseGMDB"];
	        this.SAA_1p_change = source["SAA_1p_change"];
	        this.SAA_1p_change_asset = source["SAA_1p_change_asset"];
	        this.SAA_shock = source["SAA_shock"];
	        this.SAA_parallel_change = source["SAA_parallel_change"];
	        this.SAA_parallel_change_assets = source["SAA_parallel_change_assets"];
	        this.SAA_parallel_shock = source["SAA_parallel_shock"];
	        this.bDeterministicD4D = source["bDeterministicD4D"];
	        this.bUseDFCurve = source["bUseDFCurve"];
	        this.bLiabilityDetailOutput = source["bLiabilityDetailOutput"];
	        this.bDebugger = source["bDebugger"];
	        this.invest_portfolio = source["invest_portfolio"];
	        this.dblBeta1SpotShock = source["dblBeta1SpotShock"];
	        this.dblBeta2SpotShock = source["dblBeta2SpotShock"];
	        this.dblRNcost = source["dblRNcost"];
	        this.buseswap_sim = source["buseswap_sim"];
	        this.dblmeanreversion = source["dblmeanreversion"];
	        this.bStatdiscounting = source["bStatdiscounting"];
	        this.dtStart = source["dtStart"];
	        this.dtValuation = source["dtValuation"];
	        this.sLiabilityPath = source["sLiabilityPath"];
	        this.bStatPrime = source["bStatPrime"];
	        this.b_add_premium = source["b_add_premium"];
	        this.bRunSAA = source["bRunSAA"];
	        this.SAAConfigPath = source["SAAConfigPath"];
	        this.add_riderfee_to_npv = source["add_riderfee_to_npv"];
	        this.anyuse_2_spread_sim = source["anyuse_2_spread_sim"];
	        this.SAASettingPath = source["SAASettingPath"];
	        this.bload_scenarioapproch = source["bload_scenarioapproch"];
	        this.dblDiscountSpread = source["dblDiscountSpread"];
	        this.dblMainExpense = source["dblMainExpense"];
	        this.iWithdrawalType = source["iWithdrawalType"];
	        this.iDynamicLapseType = source["iDynamicLapseType"];
	        this.iAnnuitizationType = source["iAnnuitizationType"];
	        this.iMortalityTable = source["iMortalityTable"];
	        this.iExpense_Type = source["iExpense_Type"];
	        this.iDeposite_Tpye = source["iDeposite_Tpye"];
	        this.bExpandContracts = source["bExpandContracts"];
	        this.iOutterWithdrawalType = source["iOutterWithdrawalType"];
	        this.iOutterDynamicLapseType = source["iOutterDynamicLapseType"];
	        this.iOutterAnnuitizationType = source["iOutterAnnuitizationType"];
	        this.iOutterMortalityTable = source["iOutterMortalityTable"];
	        this.iOutterExpense_Type = source["iOutterExpense_Type"];
	        this.iOutterDeposite_Type = source["iOutterDeposite_Type"];
	        this.iVM21_Discount = source["iVM21_Discount"];
	        this.iProrataLapseType = source["iProrataLapseType"];
	        this.dblLapseScaler = source["dblLapseScaler"];
	        this.dblMortalityScaler = source["dblMortalityScaler"];
	        this.bUseCohortTreatyCaps = source["bUseCohortTreatyCaps"];
	        this.bTreatyLevelMinMax = source["bTreatyLevelMinMax"];
	        this.dblInterestRateDelta = source["dblInterestRateDelta"];
	        this.dblEquityDelta = source["dblEquityDelta"];
	        this.dbl_deferal_mort_scale_sim = source["dbl_deferal_mort_scale_sim"];
	        this.dbl_payout_mort_scale_sim = source["dbl_payout_mort_scale_sim"];
	        this.dbl_lapse_dym_itm_scale_sim = source["dbl_lapse_dym_itm_scale_sim"];
	        this.dbl_lapse_dym_otm_scale_sim = source["dbl_lapse_dym_otm_scale_sim"];
	        this.dbl_lapse_floor_spread_sim = source["dbl_lapse_floor_spread_sim"];
	        this.dbl_lso_takeup_scale_sim = source["dbl_lso_takeup_scale_sim"];
	        this.dbl_ib_election_scale_sim = source["dbl_ib_election_scale_sim"];
	        this.dbl_prorata_wd_scale_sim = source["dbl_prorata_wd_scale_sim"];
	        this.dbl_d4d_wd_scale_sys_sim = source["dbl_d4d_wd_scale_sys_sim"];
	        this.dbl_d4d_wd_scale_nonsys_sim = source["dbl_d4d_wd_scale_nonsys_sim"];
	        this.dbl_d4d_migrition_scale_sim = source["dbl_d4d_migrition_scale_sim"];
	        this.dbl_d4d_migrition_spread_sim = source["dbl_d4d_migrition_spread_sim"];
	        this.ipick_scen_num = source["ipick_scen_num"];
	        this.dblMaxEquityExposure = source["dblMaxEquityExposure"];
	        this.iForceBIGSellMonth = source["iForceBIGSellMonth"];
	        this.sCREDITFILE = source["sCREDITFILE"];
	        this.sVM20_JsonPath = source["sVM20_JsonPath"];
	        this.sassetmortport_assumption_path = source["sassetmortport_assumption_path"];
	        this.AlternativeReturn = source["AlternativeReturn"];
	        this.dbl_extraspread_reinv = source["dbl_extraspread_reinv"];
	        this.ireinvest_choice = source["ireinvest_choice"];
	        this.b_replace_initialport_by_reinvport = source["b_replace_initialport_by_reinvport"];
	        this.b_run_asset_cashflow = source["b_run_asset_cashflow"];
	        this.asset_path = source["asset_path"];
	        this.initial_port_group = source["initial_port_group"];
	        this.reinvest_port_group = source["reinvest_port_group"];
	        this.bStress_Mortality = source["bStress_Mortality"];
	        this.iMortalityType = source["iMortalityType"];
	        this.bstress_run = source["bstress_run"];
	        this.iOutterMortalityType = source["iOutterMortalityType"];
	        this.sExternal_liability_path = source["sExternal_liability_path"];
	        this.bDebugInformationALM = source["bDebugInformationALM"];
	        this.bRollBVInformationALM = source["bRollBVInformationALM"];
	        this.i_no_equity_sell_period = source["i_no_equity_sell_period"];
	        this.dbl_initial_bel = source["dbl_initial_bel"];
	        this.bdividend_mode = source["bdividend_mode"];
	        this.dbl_bscr_level = source["dbl_bscr_level"];
	        this.dbl_other_expense = source["dbl_other_expense"];
	        this.bForceBIGSell = source["bForceBIGSell"];
	        this.btax_mode = source["btax_mode"];
	        this.bload_ss_epl = source["bload_ss_epl"];
	        this.bload_gul_epl = source["bload_gul_epl"];
	        this.bload_oas = source["bload_oas"];
	        this.bassetrebalance = source["bassetrebalance"];
	        this.rebalance_time_schedual = source["rebalance_time_schedual"];
	        this.irebalancefreq = source["irebalancefreq"];
	        this.bexclude_CLO_equity = source["bexclude_CLO_equity"];
	        this.dblswapexpense = source["dblswapexpense"];
	        this.dbl_libcf_scalar = source["dbl_libcf_scalar"];
	        this.bOnTheFlyGenerator = source["bOnTheFlyGenerator"];
	        this.sfinancialmodel_config = source["sfinancialmodel_config"];
	        this.b_dividend_restrict = source["b_dividend_restrict"];
	        this.dbl_dividend_restriction_schedual = source["dbl_dividend_restriction_schedual"];
	        this.b_replace_initport_modify = source["b_replace_initport_modify"];
	        this.reinvest_port_group_inner = source["reinvest_port_group_inner"];
	        this.improve_path_m = source["improve_path_m"];
	        this.improve_path_f = source["improve_path_f"];
	        this.dbl_tax_shock = source["dbl_tax_shock"];
	        this.bload_epl_adhoc_mode = source["bload_epl_adhoc_mode"];
	        this.sliab_inner_cf_external = source["sliab_inner_cf_external"];
	        this.sliab_outter_cf_external = source["sliab_outter_cf_external"];
	        this.sScenario_innerfile_external = source["sScenario_innerfile_external"];
	        this.SScenario_outterfile_external = source["SScenario_outterfile_external"];
	        this.ishockratesyear = source["ishockratesyear"];
	        this.ifin_month = source["ifin_month"];
	        this.binner_asset_reserve_run = source["binner_asset_reserve_run"];
	        this.AlternativeReturn_inner = source["AlternativeReturn_inner"];
	        this.dbl_inner_other_expense = source["dbl_inner_other_expense"];
	        this.bScenarioapproach_cf = source["bScenarioapproach_cf"];
	        this.dbl_fx_expense = source["dbl_fx_expense"];
	        this.corp_blocks = source["corp_blocks"];
	        this.s_Nar_files = source["s_Nar_files"];
	        this.iSimulationLength = source["iSimulationLength"];
	        this.iSimYear = source["iSimYear"];
	        this.i_use_nested_bel_period = source["i_use_nested_bel_period"];
	        this.bswap_optimization = source["bswap_optimization"];
	        this.dbl_inner_MaxEquityExposure = source["dbl_inner_MaxEquityExposure"];
	        this.dbl_initial_bel_noequity = source["dbl_initial_bel_noequity"];
	        this.reinvest_port_group_inner_noequity = source["reinvest_port_group_inner_noequity"];
	        this.brebalance_sell_buy = source["brebalance_sell_buy"];
	        this.b_fill_bscr_gap = source["b_fill_bscr_gap"];
	        this.bload_dividend_array = source["bload_dividend_array"];
	        this.bloadtax_array = source["bloadtax_array"];
	        this.attributiontype_1 = source["attributiontype_1"];
	        this.attributiontype_2 = source["attributiontype_2"];
	        this.attributiontype_3 = source["attributiontype_3"];
	        this.attributiontype_4 = source["attributiontype_4"];
	        this.attributiontype_5 = source["attributiontype_5"];
	        this.attributiontype_6 = source["attributiontype_6"];
	        this.attributiontype_7 = source["attributiontype_7"];
	        this.attributiontype_8 = source["attributiontype_8"];
	        this.attributiontype_9 = source["attributiontype_9"];
	        this.attributiontype_10 = source["attributiontype_10"];
	        this.attributiontype_11 = source["attributiontype_11"];
	        this.attributiontype_12 = source["attributiontype_12"];
	        this.attributiontype_13 = source["attributiontype_13"];
	        this.attributiontype_14 = source["attributiontype_14"];
	        this.attributiontype_15 = source["attributiontype_15"];
	        this.dbltier1maxpct = source["dbltier1maxpct"];
	        this.SAA_target_port = this.convertValues(source["SAA_target_port"], SAATargetPort);
	        this.SAA_target_port_inner = this.convertValues(source["SAA_target_port_inner"], SAATargetPort);
	        this.sScenario_innerfile_up_external = source["sScenario_innerfile_up_external"];
	        this.sScenario_innerfile_down_external = source["sScenario_innerfile_down_external"];
	        this.dblhedgeratio = source["dblhedgeratio"];
	        this.intsim_stop_mtm = source["intsim_stop_mtm"];
	        this.sScenario_innerfile_up_liq_external = source["sScenario_innerfile_up_liq_external"];
	        this.sScenario_innerfile_down_liq_external = source["sScenario_innerfile_down_liq_external"];
	        this.initial_base0_bel = source["initial_base0_bel"];
	        this.liqshockarray = source["liqshockarray"];
	        this.loaded_equity_bel = source["loaded_equity_bel"];
	        this.loaded_nonequity_bel = source["loaded_nonequity_bel"];
	        this.loaded_bases0_bel = source["loaded_bases0_bel"];
	        this.bload_generated_reserves = source["bload_generated_reserves"];
	        this.tax_reserve = source["tax_reserve"];
	        this.btax_reserve = source["btax_reserve"];
	        this.sScenario_innerfile_up_liq_external_shock1 = source["sScenario_innerfile_up_liq_external_shock1"];
	        this.sScenario_innerfile_down_liq_external_shock1 = source["sScenario_innerfile_down_liq_external_shock1"];
	        this.sScenario_innerfile_up_liq_external_shock2 = source["sScenario_innerfile_up_liq_external_shock2"];
	        this.sScenario_innerfile_down_liq_external_shock2 = source["sScenario_innerfile_down_liq_external_shock2"];
	        this.loaded_dividend = source["loaded_dividend"];
	        this.anyuse_4_scale_sim = source["anyuse_4_scale_sim"];
	        this.bbscr_old_rule = source["bbscr_old_rule"];
	        this.dblDiscountSpread_2 = source["dblDiscountSpread_2"];
	        this.bexclude_hy_asset_inner = source["bexclude_hy_asset_inner"];
	        this.dbl_incentive_fee = source["dbl_incentive_fee"];
	        this.dbl_alpha_pub = source["dbl_alpha_pub"];
	        this.i_inner_otherexp_shockType = source["i_inner_otherexp_shockType"];
	        this.b_SBA_inner_detail = source["b_SBA_inner_detail"];
	        this.i_swap_wo_pd = source["i_swap_wo_pd"];
	        this.i_std_apch_pd = source["i_std_apch_pd"];
	        this.dbl_std_apch_value = source["dbl_std_apch_value"];
	        this.dbl_std_apch_dur = source["dbl_std_apch_dur"];
	        this.i_fctr_apch_pd = source["i_fctr_apch_pd"];
	        this.dbl_swap_fix_amt = source["dbl_swap_fix_amt"];
	        this.i_swap_fix_beg = source["i_swap_fix_beg"];
	        this.i_swap_fix_end = source["i_swap_fix_end"];
	        this.iuse_sim_liqratecharge_begin = source["iuse_sim_liqratecharge_begin"];
	        this.iuse_sim_liqratecharge_end = source["iuse_sim_liqratecharge_end"];
	        this.b_sba_inner_incentive = source["b_sba_inner_incentive"];
	        this.b_grading_sens = source["b_grading_sens"];
	        this.ScenarioLoader = source["ScenarioLoader"];
	        this.b_notch_down_rating = source["b_notch_down_rating"];
	        this.dbl_bma_258f_spread = source["dbl_bma_258f_spread"];
	        this.binner_grading_fixedyears = source["binner_grading_fixedyears"];
	        this.bincludebidaskcost = source["bincludebidaskcost"];
	        this.bswap_sofr = source["bswap_sofr"];
	        this.bsofr_curve_swap = source["bsofr_curve_swap"];
	        this.sofr_outer = source["sofr_outer"];
	        this.sofr_inner = source["sofr_inner"];
	        this.sofr_inner_u25 = source["sofr_inner_u25"];
	        this.sofr_inner_d25 = source["sofr_inner_d25"];
	        this.sofr_inner_liqup = source["sofr_inner_liqup"];
	        this.sofr_inner_liqdown = source["sofr_inner_liqdown"];
	        this.sofr_inner_liqup_u25 = source["sofr_inner_liqup_u25"];
	        this.sofr_inner_liqup_d25 = source["sofr_inner_liqup_d25"];
	        this.sofr_inner_liqdown_u25 = source["sofr_inner_liqdown_u25"];
	        this.sofr_inner_liqdown_d25 = source["sofr_inner_liqdown_d25"];
	        this.brun_bma_liq_size = source["brun_bma_liq_size"];
	        this.bma_liq_up_size_array = source["bma_liq_up_size_array"];
	        this.bma_liq_down_size_array = source["bma_liq_down_size_array"];
	        this.bnotchdown_outside = source["bnotchdown_outside"];
	        this.dbl_inner_bma_spreadshock = source["dbl_inner_bma_spreadshock"];
	        this.dbl_loc_cost = source["dbl_loc_cost"];
	        this.i_loc_period = source["i_loc_period"];
	        this.dbl_dta_initial = source["dbl_dta_initial"];
	        this.dbl_tax_array = source["dbl_tax_array"];
	        this.dbl_bma_258f_spread_inner = source["dbl_bma_258f_spread_inner"];
	        this.balts_bmareturn = source["balts_bmareturn"];
	        this.iExpense_Type_inner = source["iExpense_Type_inner"];
	        this.innermaxequity_0 = source["innermaxequity_0"];
	        this.reinvest_port_group_inner_adhoc1 = source["reinvest_port_group_inner_adhoc1"];
	        this.reinvest_port_group_inner_adhoc1_noequity = source["reinvest_port_group_inner_adhoc1_noequity"];
	        this.b_drag_cash_rebalance = source["b_drag_cash_rebalance"];
	        this.brun_unique_cashflow_prismic = source["brun_unique_cashflow_prismic"];
	        this.sba_inner_expense_shock = source["sba_inner_expense_shock"];
	        this.sba_inner_equitymean = source["sba_inner_equitymean"];
	        this.sba_inner_equityvol = source["sba_inner_equityvol"];
	        this.sSVLpath = source["sSVLpath"];
	        this.bidaskcost_public = source["bidaskcost_public"];
	        this.bidaskcost_publicCLO = source["bidaskcost_publicCLO"];
	        this.bidaskcost_fx = source["bidaskcost_fx"];
	        this.bidaskcost_swap = source["bidaskcost_swap"];
	        this.dblInitialRate = source["dblInitialRate"];
	        this.portfolioRunoff = source["portfolioRunoff"];
	        this.dblSpread = source["dblSpread"];
	        this.dblMainAUMExpense = source["dblMainAUMExpense"];
	        this.dblOutterLapseScaler = source["dblOutterLapseScaler"];
	        this.bSunriseOnly = source["bSunriseOnly"];
	        this.bTreatyOnlyVM21 = source["bTreatyOnlyVM21"];
	        this.ReserveMethod = source["ReserveMethod"];
	        this.dblPartialWithdrawal = source["dblPartialWithdrawal"];
	        this.dblParitalWithdrawalEfficiency = source["dblParitalWithdrawalEfficiency"];
	        this.dblOutterPartialWithdrawalEfficiencyScaler = source["dblOutterPartialWithdrawalEfficiencyScaler"];
	        this.bCommuteGMWB = source["bCommuteGMWB"];
	        this.bLoadAAAScenariosfromFile = source["bLoadAAAScenariosfromFile"];
	        this.sAAAScenariofromFile = source["sAAAScenariofromFile"];
	        this.iLoadSingleAAA = source["iLoadSingleAAA"];
	        this.bLoadAAASequence = source["bLoadAAASequence"];
	        this.iSinglePolicyFilter = source["iSinglePolicyFilter"];
	        this.bBestEstimateAssumptions = source["bBestEstimateAssumptions"];
	        this.iLoadSequence = source["iLoadSequence"];
	        this.sMortalityPath = source["sMortalityPath"];
	        this.iProjectNum = source["iProjectNum"];
	        this.iSeedShift = source["iSeedShift"];
	        this.iSimInterval = source["iSimInterval"];
	        this.dbl3m = source["dbl3m"];
	        this.dbl6m = source["dbl6m"];
	        this.dbl1y = source["dbl1y"];
	        this.dbl2y = source["dbl2y"];
	        this.dbl3y = source["dbl3y"];
	        this.dbl5y = source["dbl5y"];
	        this.dbl7y = source["dbl7y"];
	        this.dbl10y = source["dbl10y"];
	        this.dbl20y = source["dbl20y"];
	        this.dbl30y = source["dbl30y"];
	        this.bSPIACashFlow = source["bSPIACashFlow"];
	        this.dblSpreadOnAnnuitization = source["dblSpreadOnAnnuitization"];
	        this.dblInvestmentExpense = source["dblInvestmentExpense"];
	        this.dblDefaultExpense = source["dblDefaultExpense"];
	        this.dblFixedDiscountRate = source["dblFixedDiscountRate"];
	        this.RW_ESG_Settings = source["RW_ESG_Settings"];
	        this.bForceRevenueShare = source["bForceRevenueShare"];
	        this.dblTransactionExpense = source["dblTransactionExpense"];
	        this.c1_riskfactor = source["c1_riskfactor"];
	        this.BSCR_riskfactor = source["BSCR_riskfactor"];
	        this.iTimeSkip = source["iTimeSkip"];
	        this.bForceSingleThread = source["bForceSingleThread"];
	        this.bShiftTimeSkip = source["bShiftTimeSkip"];
	        this.bCDHS = source["bCDHS"];
	        this.bAllowProgressBar = source["bAllowProgressBar"];
	        this.bUniqueScenarioSizeTuning = source["bUniqueScenarioSizeTuning"];
	        this.bPolicySampling = source["bPolicySampling"];
	        this.iScenarioPerPolicy = source["iScenarioPerPolicy"];
	        this.bMemorySaver = source["bMemorySaver"];
	        this.iCoreThreadOpen = source["iCoreThreadOpen"];
	        this.bWeightRun = source["bWeightRun"];
	        this.bUpDownOff = source["bUpDownOff"];
	        this.bGMIBForcedUtilization = source["bGMIBForcedUtilization"];
	        this.bOutterGMIBForcedUtilization = source["bOutterGMIBForcedUtilization"];
	        this.bGMIBMAXAGEUTILIZATION = source["bGMIBMAXAGEUTILIZATION"];
	        this.bGAPVVM21NOSPREAD = source["bGAPVVM21NOSPREAD"];
	        this.imortalitycode = source["imortalitycode"];
	        this.bTestSpecialMortality = source["bTestSpecialMortality"];
	        this.dblTestMortalityrate = source["dblTestMortalityrate"];
	        this.sRegressionPath = source["sRegressionPath"];
	        this.sAnnuityPath = source["sAnnuityPath"];
	        this.sSerializedPath = source["sSerializedPath"];
	        this.dblCorpYieldBeta = source["dblCorpYieldBeta"];
	        this.dblITMAnnuitizationPower = source["dblITMAnnuitizationPower"];
	        this.dblLapseFloor = source["dblLapseFloor"];
	        this.dblLastCancelUtilization = source["dblLastCancelUtilization"];
	        this.dblLastChanceFactor = source["dblLastChanceFactor"];
	        this.dblMortalityImprovementScaler = source["dblMortalityImprovementScaler"];
	        this.dblNRSINonGuaranteeFactor = source["dblNRSINonGuaranteeFactor"];
	        this.bAllowFeeResetToMaxGMIB = source["bAllowFeeResetToMaxGMIB"];
	        this.bAnnualAnnuitizationOnly = source["bAnnualAnnuitizationOnly"];
	        this.bExcludeReinsuranceCap = source["bExcludeReinsuranceCap"];
	        this.bForceGMWBACDto115 = source["bForceGMWBACDto115"];
	        this.bPayoutExpense = source["bPayoutExpense"];
	        this.bSobolRand = source["bSobolRand"];
	        this.bSobolShifted_ = source["bSobolShifted_"];
	        this.bSobolBrownianBridge = source["bSobolBrownianBridge"];
	        this.bSPIAReserve = source["bSPIAReserve"];
	        this.bUniqueScenarioContractTesting = source["bUniqueScenarioContractTesting"];
	        this.bUseSerializedResults = source["bUseSerializedResults"];
	        this.bGMWBTakeSPIA = source["bGMWBTakeSPIA"];
	        this.bIgnoreCommission = source["bIgnoreCommission"];
	        this.bLoadTreatyBasedUtilization = source["bLoadTreatyBasedUtilization"];
	        this.bMAFCaching = source["bMAFCaching"];
	        this.bNoWithdrawalCohortAdjustment = source["bNoWithdrawalCohortAdjustment"];
	        this.bOverrideTargetAllocation = source["bOverrideTargetAllocation"];
	        this.bPayoutImprovement = source["bPayoutImprovement"];
	        this.bUniqueScenarios = source["bUniqueScenarios"];
	        this.dblExpenseFactor = source["dblExpenseFactor"];
	        this.bDemean = source["bDemean"];
	        this.bDemeanMartingaleAdjustment = source["bDemeanMartingaleAdjustment"];
	        this.dblFundDriftAdjustment = source["dblFundDriftAdjustment"];
	        this.bUseBond = source["bUseBond"];
	        this.iSimulationType = source["iSimulationType"];
	        this.bSerializedRollforward = source["bSerializedRollforward"];
	        this.bSerializeOutput = source["bSerializeOutput"];
	        this.dbl10yweight = source["dbl10yweight"];
	        this.dbl1yweight = source["dbl1yweight"];
	        this.dbl20yweight = source["dbl20yweight"];
	        this.dbl30ySwapSpread = source["dbl30ySwapSpread"];
	        this.dbl30ySwapweight = source["dbl30ySwapweight"];
	        this.dbl30yweight = source["dbl30yweight"];
	        this.dbl5yweight = source["dbl5yweight"];
	        this.dblBeginningBook = source["dblBeginningBook"];
	        this.dbl10ySpread = source["dbl10ySpread"];
	        this.dbl1ySpread = source["dbl1ySpread"];
	        this.dbl20ySpread = source["dbl20ySpread"];
	        this.dbl30ySpread = source["dbl30ySpread"];
	        this.dbl5ySpread = source["dbl5ySpread"];
	        this.dblC3DiscountRate = source["dblC3DiscountRate"];
	        this.dblCDHSCallOptionVol = source["dblCDHSCallOptionVol"];
	        this.dblCDHSEquityMeanReturn = source["dblCDHSEquityMeanReturn"];
	        this.dblCDHSEquityRateParameters = source["dblCDHSEquityRateParameters"];
	        this.dblCDHSInterestRateParamaters = source["dblCDHSInterestRateParamaters"];
	        this.dblCorpYieldConstant = source["dblCorpYieldConstant"];
	        this.dblTaxRate = source["dblTaxRate"];
	        this.iAG43Solve = source["iAG43Solve"];
	        this.iC3P2Solve = source["iC3P2Solve"];
	        this.taxreserveweight = source["taxreserveweight"];
	        this.bCDHSGPAVDOnly = source["bCDHSGPAVDOnly"];
	        this.bCDHSwithCallOption = source["bCDHSwithCallOption"];
	        this.bFullDeltaCDHS = source["bFullDeltaCDHS"];
	        this.bFullRhoCDHS = source["bFullRhoCDHS"];
	        this.bGPVADOneAsset = source["bGPVADOneAsset"];
	        this.bGPVADwithCDHS = source["bGPVADwithCDHS"];
	        this.bRunGPAVDMatrix = source["bRunGPAVDMatrix"];
	        this.bStandardScenario = source["bStandardScenario"];
	        this.bWorkingReserves = source["bWorkingReserves"];
	        this.CDHSshocktype = source["CDHSshocktype"];
	        this.iCDHSDropRecoveryLength = source["iCDHSDropRecoveryLength"];
	        this.bQISIINRSIFactors = source["bQISIINRSIFactors"];
	        this.bAG43OnlyOutput = source["bAG43OnlyOutput"];
	        this.bNoMortalityAdjustment = source["bNoMortalityAdjustment"];
	        this.iUpDown = source["iUpDown"];
	        this.bRegressionTest = source["bRegressionTest"];
	        this.dblFXRate = source["dblFXRate"];
	        this.bAgeCalculationALB = source["bAgeCalculationALB"];
	        this.bBeginningMonthMortality = source["bBeginningMonthMortality"];
	        this.bEndofAnniversaryProjection = source["bEndofAnniversaryProjection"];
	        this.bExactDate = source["bExactDate"];
	        this.bFeeAddBackForLapse = source["bFeeAddBackForLapse"];
	        this.bFullCalculation = source["bFullCalculation"];
	        this.bStress_Lapse = source["bStress_Lapse"];
	        this.bUse22ndTable = source["bUse22ndTable"];
	        this.bUseAgam22ndTable = source["bUseAgam22ndTable"];
	        this.iCurveIntepolationMethod = source["iCurveIntepolationMethod"];
	        this.iThreadsForOnTheFlyGenerator = source["iThreadsForOnTheFlyGenerator"];
	        this.bMonthlyMarketAnnuityFactor = source["bMonthlyMarketAnnuityFactor"];
	        this.bPredictiveLapse = source["bPredictiveLapse"];
	        this.bStandardApproachDiscounting = source["bStandardApproachDiscounting"];
	        this.parameters = source["parameters"];
	    }
	
		convertValues(a: any, classs: any, asMap: boolean = false): any {
		    if (!a) {
		        return a;
		    }
		    if (a.slice && a.map) {
		        return (a as any[]).map(elem => this.convertValues(elem, classs));
		    } else if ("object" === typeof a) {
		        if (asMap) {
		            for (const key of Object.keys(a)) {
		                a[key] = new classs(a[key]);
		            }
		            return a;
		        }
		        return new classs(a);
		    }
		    return a;
		}
	}
	export class LiabilityConfigData {
	    DirectoryName: string;
	    ConfigData: LiabilityConfig;
	
	    static createFrom(source: any = {}) {
	        return new LiabilityConfigData(source);
	    }
	
	    constructor(source: any = {}) {
	        if ('string' === typeof source) source = JSON.parse(source);
	        this.DirectoryName = source["DirectoryName"];
	        this.ConfigData = this.convertValues(source["ConfigData"], LiabilityConfig);
	    }
	
		convertValues(a: any, classs: any, asMap: boolean = false): any {
		    if (!a) {
		        return a;
		    }
		    if (a.slice && a.map) {
		        return (a as any[]).map(elem => this.convertValues(elem, classs));
		    } else if ("object" === typeof a) {
		        if (asMap) {
		            for (const key of Object.keys(a)) {
		                a[key] = new classs(a[key]);
		            }
		            return a;
		        }
		        return new classs(a);
		    }
		    return a;
		}
	}

}

